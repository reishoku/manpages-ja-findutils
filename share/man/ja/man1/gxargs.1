.\" -*- nroff -*-
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\"    This file documents the GNU utilities for finding files that match
.\" certain criteria and performing various operations on them.
.\"
.\"    Copyright (C) 1994 Free Software Foundation, Inc.
.\"
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\"    Permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\"    Permission is granted to copy and distribute translations of this
.\" manual into another language, under the above conditions for modified
.\" versions, except that this permission notice may be stated in a
.\" translation approved by the Foundation.
.\"
.\" Japanese Version Copyright (c) 1997 NAKANO Takeo
.\"   and 2011 Chonan Yoichi,
.\"         all rights reserved.
.\" Translated Thu May 11 1997 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Modified Fri 14 Aug 1998 by NAKANO Takeo -- bug fixes.
.\" Updated and modified (findutils-4.4.2) Fri Jan 28 12:28:44 JST 2011
.\"         by Chonan Yoichi <cyoichi@maple.ocn.ne.jp>
.\" Updated and modified (findutils-4.6.0) Sat Mar  3 11:18:22 JST 2018
.\"         bu Chonan Yoichi
.\"
.\"WORD    end of file string    ファイル終端文字列
.\"
.TH XARGS 1   
.SH 名前
xargs \- 標準入力を読み込んでコマンドラインを作成し、それを実行する
.SH 書式
\fBxargs\fP
.nh
[\fB\-0prtx\fP] [\fB\-E \fP\fIeof\-str\fP] [\fB\-e\fP[\fIeof\-str\fP]] [\fB\-\-eof\fP[=\fIeof\-str\fP]]
[\fB\-\-null\fP] [\fB\-d \fP\fIdelimiter\fP] [\fB\-\-delimiter \fP\fIdelimiter\fP]
[\fB\-I \fP\fIreplace\-str\fP] [\fB\-i\fP[\fIreplace\-str\fP]]
[\fB\-\-replace\fP[=\fIreplace\-str\fP]] [\fB\-l\fP[\fImax\-lines\fP]]
[\fB\-L \fP\fImax\-lines\fP] [\fB\-\-max\-lines\fP[=\fImax\-lines\fP]] [\fB\-n \fP\fImax\-args\fP]
[\fB\-\-max\-args\fP=\fImax\-args\fP] [\fB\-s \fP\fImax\-chars\fP]
[\fB\-\-max\-chars\fP=\fImax\-chars\fP] [\fB\-P \fP\fImax\-procs\fP]
[\fB\-\-max\-procs\fP=\fImax\-procs\fP] [\fB\-\-process\-slot\-var\fP=\fIname\fP]
[\fB\-\-interactive\fP] [\fB\-\-verbose\fP] [\fB\-\-exit\fP] [\fB\-\-no\-run\-if\-empty\fP]
[\fB\-\-arg\-file\fP=\fIfile\fP] [\fB\-\-show\-limits\fP] [\fB\-\-version\fP] [\fB\-\-help\fP]
[\fIcommand\fP [\fIinitial\-arguments\fP]]
.PP
[\fB訳注\fP]: 見やすくするために、整理して単純化すると:
.PP
.B xargs
[\fIoptions\fR]
[\fIcommand\fR [\fIinitial-arguments\fR]]
.hy
.SH 説明
このマニュアルページは、GNU 版 \fBxargs\fP の使用法を説明している。
\fBxargs\fP は、標準入力から空白や改行で区切られた一連の項目を読み込み
(空白はダブルクォート、シングルクォート、バックスラッシュによって保護できる)、
それを引き数にして、指定した \fIcommand\fP を 1 回以上実行する
(デフォルトのコマンドは \fI/bin/echo\fP である)。このとき、ユーザが \fIcommand\fP
に対して指定した引き数 (上記書式の \fIinitial\-arguments\fP) があれば、
標準入力から読み込んだ一連の項目は、その後ろに追加される。
標準入力における空行は無視する。
.P
\fIcommand\fP のコマンドラインは、(\fB\-n\fP や \fB\-L\fP オプションが使用されていない場合は)
システムが定めているコマンドラインの長さの限界に達するまで、長いものが作成される。
そして、指定された \fIcommand\fP が、入力項目のリストを一つ残らず処理するのに必要な回数だけ、呼び出される。
だから、おおむね、\fIcommand\fP が呼び出される回数は、入力項目の数よりも、ずっと少なくてすむわけだ。
このことは、たいていの場合、パフォーマンスを著しく向上させることになる。
なお、コマンドの中には、都合がよいことに、並列的に実行できるものもある。\fB\-P\fP
オプションを参照していただきたい。
.P
Unix ではファイル名に空白や改行を含むことが可能なので、
こうしたデフォルトの動作は、しばしば問題を引き起こす。空白や改行を含むファイル名は、
\fBxargs\fP によって適切に処理されないのだ。そうした状況では、\fB\-0\fP
オプションを使用した方がよい。そうすれば、その手の問題を回避することができる。
なお、\fB\-0\fP オプションを使う場合は、\fBxargs\fP
の入力を生成するプログラムの方でも、区切りの指標に必ずヌル文字を使うようにする必要がある。
たとえば、そのプログラムが GNU \fBfind\fP ならば、\fB\-print0\fP オプションでそれが可能だ。
.P
指定したコマンドの実行が終了ステータス 255 で終了することがあれば、
\fBxargs\fP は即座に停止して、それ以上入力を読み込まない。
また、このとき、エラーメッセージを標準エラーに表示する。
.SH オプション
.TP 
.PD
\fB\-0, \-\-null\fP
入力される一連の項目が、ホワイトスペース (空白や改行) ではなく、ヌル文字によって区切られることになる。
また、引用符やバックスラッシュが特別な意味を持たなくなる
(すなわち、あらゆる文字が文字通りに解釈される)。後述のファイル終端文字列も無効になり、
(\fBxargs\fP が作成するコマンドラインにおいて) 他の引き数と同じように扱われる。
このオプションは、入力される項目にホワイトスペース、引用符、バックスラッシュなどが含まれる可能性がある場合に、役に立つ。
GNU \fBfind\fP の \fB\-print0\fP オプションが生成する出力は、このモードに対応した入力になる。

.TP 
.PD
\fB\-a \fP\fIfile\fP\fB, \-\-arg\-file=\fP\fIfile\fP
一連の項目を標準入力からではなく、\fIfile\fP から読み込む。
デフォルトでは、指定したコマンドが実行される際に、標準入力が \fI/dev/null\fP
に付け換えられるが、このオプションを使用した場合は、標準入力の付け換えが起こらない
(訳注: 別の言い方をすると、指定したコマンドの実行中、デフォルトでは標準入力が使えなくなるので、たとえば、"rm \-i"
の出すプロンプトに応答できなくなるが、このオプションを使用した場合は、標準入力が使えるので、応答できるということ)。

.TP 
.PD
\fB\-\-delimiter=\fP\fIdelim\fP\fB, \-d\fP\fI delim\fP
入力される一連の項目が、指定された文字によって区切られることになる。
指定される区切り文字は、単一の文字でもよく、\fB\en\fP のような
C 言語式のエスケープ文字でも、8 進数や 16 進数のエスケープコードでもよい。
8 進数や 16 進数のエスケープコードは、\fBprintf\fP コマンドの場合と同様に解釈される。
マルチバイト文字には対応していない。入力を処理する際、引用符やバックスラッシュは特別扱いされない。
すなわち、入力中のあらゆる文字が、文字通りに解釈される。
\fB\-d\fP オプションを指定すると、ファイル終端文字列は無効になり、(\fBxargs\fP
が作成するコマンドラインにおいて) 他の引き数と同じように扱われる。
入力が、項目を改行で区切っているだけのような単純な構成の場合には、
このオプションを使ってもよいが、ほとんどたいていの場合、なるべくなら、\fBxargs\fP の
\fB\-\-null\fP を使うように、出力側のプログラムを組み立てる方が望ましい。

.TP 
\fB\-E\fP\fI eof\-str\fP
\fIeof\-str\fP をファイル終端文字列として設定する。
ファイル終端文字列が入力中の 1 行として現れると、それ以後の入力は無視される。
\fB\-E\fP も \fB\-e\fP も指定しない場合、ファイル終端文字列は使用されない。
(訳注: 原文には「入力中の 1 行として現れると
(occurs as a line of input)」とあるが、実際の動作は「入力中に独立した
1 項目として現れると、それ以後の入力は無視される」のようだ。)
.TP 
.PD
\fB\-e\fP[\fIeof\-str\fP], \fB\-\-eof\fP[\fI=eof\-str\fP]
このオプションは \fB\-E\fP オプションの同義語である。\fB\-E\fP の方を使っていただきたい。
理由は、そちらが POSIX に準拠しているのに対して、こちらは準拠していないからだ。
\fIeof\-str\fP の部分が省略されると、ファイル終端文字列が存在しないことになる。
\fB\-E\fP も \fB\-e\fP も指定しない場合、ファイル終端文字列は使用されない。
.TP 
\fB\-I\fP\fI replace\-str\fP
\fIinitial\-arguments\fP 中で文字列 \fIreplace\-str\fP
が現れるすべての箇所を、標準入力から読み込んだ名前で置き換える。
なお、標準入力中にクォートされていない空白があっても、それは入力項目の区切りにはならない。
区切りの指標は改行文字だけになるのだ。\fB\-x\fP と \fB\-L\fP 1 が自動的に設定される。
.RS
.IP "[\fB訳注\fP]:" 8
もう少し詳しく説明した方がよいだろう。普通、ユーザが \fBxargs\fP 
で実行するコマンドに引き数 (それが \fIinitial-arguments\fP である。上記書式を参照) 
を指定した場合、標準入力から読み込まれた項目群は、\fIinitial-arguments\fP 
の後ろにどんどん追加されて行く。それに対して、\fB\-I\fP \fIreplace-str\fP 
オプションを使用した場合は、次の二点が異なっている。
一つは、標準入力は改行で分割され、その 1 行 1 行が、コマンド 1 回の実行につき 
1 個づつ使用されること (それが \fB\-L\fP 1 ということだ)。
もう一つは、その 1 行が 1 項目として扱われ (\fB\-L\fP 1 
を単独で使った場合とは、そこが違う)、その 1 項目が、\fIinitial-arguments\fP 
の後ろに追加されるのではなく、\fIinitial-arguments\fP 中の文字列 
\fIreplace-str\fP が現れるすべての位置に埋め込まれることだ。以下の例では、
\(dq{}\(dq が \fIreplace-str\fP であり、\(dq{} is {}\(dq の部分がコマンド 
\fBecho\fP に対する \fIinitial-arguments\fP である。\fB\-I\fP 
の直後の空白は、あってもなくてもよく、\fIreplace-str\fP は 
\(dq{}\(dq 以外の文字列でもよい。なお \(dq{}\(dq はクォートした方がよいかもしれない。

.nf
$ echo -e "AAA BBB\\nCCC\\nDDD" |xargs -I{} echo {} is {}
AAA BBB is AAA BBB
CCC is CCC
DDD is DDD
.fi

入力項目を区切っているデリミタは改行だけであり、空白は項目の区切りとして機能していないのがお分かりになるだろう。
別の言い方をすると、\fB\-I\fP では、各行は 1 行全体が事実上クォートされてコマンドに渡される 
(注意: \fB\-L\fP 1 にそんな作用はない)。
従って、\fB\-I\fP オプションを使えば、空白を含むファイル名を処理できるということになる。
たとえば、カレントディレクトリに \(dqnospace\(dq と \(dqhave space\(dq 
というファイルがあるとしよう。

.nf
$ ls |xargs file
have:    cannot open `have' (No such file or directory)
space:   cannot open `space' (No such file or directory)
nospace: ASCII text
$ ls |xargs -L1 file
have:  cannot open `have' (No such file or directory)
space: cannot open `space' (No such file or directory)
nospace: ASCII text
$ ls |xargs -I{} file {}
have space: UTF-8 Unicode text
nospace: ASCII text
.fi
.RE
.TP 
.PD
\fB\-i\fP[\fIreplace\-str\fP], \fB\-\-replace\fP[\fI=replace\-str\fP]
このオプションは、 \fIreplace\-str\fP が指定されていれば、\fB\-I\fP\fIreplace\-str\fP
の同義語である。引き数 \fIreplace\-str\fP が省略されていれば、\fB\-I\fP{} と同じことになる。
このオプションは非推奨である。\fB\-I\fP を使った方がよい。
.TP 
\fB\-L\fP\fI max\-lines\fP
1 コマンドラインにつき最大 \fImax\-lines\fP 行の (空行ではない) 入力行を使用する。
入力行の行末に空白文字が付いていると、その行は次の入力行に論理的に続いていることになる。
自動的に \fB\-x\fP が指定される。
.RS
.IP "[\fB訳注\fP]:" 8
\fB\-n\fP オプションとの違いに注意。
「行末に空白文字」云々については、以下の 3 番目の例を他のものと比較していただきたい。
コマンドの実行回数がわかるように、\fBecho\fP に \fIinitial-argument\fP 
を付けてみた (代わりに \fB\-t\fP オプションを使ってもよかったかもしれない)。
なお、デリミタをヌル文字にしたときや、\fB\-\-delimiter\fP 
で指定したときの動作がどうなるかは、ご自分で試してみていただきたい。

.nf
$ echo AAA BBB CCC |xargs -L1 echo "line: "
line:  AAA BBB CCC
$ echo -e "AAA\\nBBB\\nCCC" |xargs -L1 echo "line: "
line:  AAA
line:  BBB
line:  CCC
$ echo -e "AAA \\nBBB\\nCCC" |xargs -L1 echo "line: "
line:  AAA BBB
line:  CCC
.fi
.RE
.TP 
.PD
\fB\-l\fP[\fImax\-lines\fP], \fB\-\-max\-lines\fP[=\fImax\-lines\fP]
\fB\-L\fP オプションの同義語である。\fB\-L\fP とは違って、\fImax\-lines\fP
という引き数を指定するかどうかは任意である。引き数 \fImax\-lines\fP
を指定しなかった場合は、デフォルトの 1 が使用される。POSIX 規格では
\fB\-L\fP の方を使うことになっているので、\fB\-l\fP オプションの使用はお勧めできない。
.TP 
.PD
\fB\-n\fP\fI max\-args\fP\fB, \fP\fB\-\-max\-args\fP=\fImax\-args\fP
1 コマンドラインにつき最大 \fImax\-args\fP 個の引き数を使用する。
作成されたコマンドラインが、コマンドライン長の上限を超過する場合は
(\fB\-s\fP オプション参照)、\fImax\-args\fP より少ない引き数が使用されることになる。
ただし、\fB\-x\fP オプションが指定されているときは別で、その場合は \fBxargs\fP が終了する。
.TP 
.PD
\fB\-P\fP\fI max\-procs\fP, \fB\-\-max\-procs\fP=\fImax\-procs\fP
同時に実行するプロセスの最大数を \fImax\-procs\fP にする。デフォルトは 1 である。
\fImax\-procs\fP が 0 だと、\fBxargs\fP はできるだけ多くのプロセスを同時に実行しようとする。
\fB\-P\fP オプションには、\fB\-n\fP か \fB\-L\fP オプションを併せて使用するべきだ。
さもないと、おそらく exec 関数がたった一回しか実行されないことになるだろう。
\fBxargs\fP の実行中に、そのプロセスに SIGUSR1 シグナルを送れば、同時に実行するコマンドの数を増やすことができる。
また、SIGUSR2 シグナルを送れば、その数を減らすことができる。
ただし、実装が決めている上限を越えて増やすことはできないし
(上限は \fI\-\-show\-limits\fP を使えば、知ることができる)、1 より少なくすることもできない。
\fBxargs\fP は、実行しているコマンドを終了させるわけではない。
実行数を減らすように命じられたときは、単に現在動いているコマンドが二つ以上終了するのを待ち、
それから別のコマンドを開始するのである。

注意していただきたいが、共有リソースに対する並列アクセスをきちんと管理するのは、呼び出されるプロセス側の問題だ。
たとえば、複数のプロセスが標準出力に書き出そうとした場合、出力は不定の順番で生成されることになる
(だから，混じり合ってしまう可能性が高い)。そうならないためには、プロセス同士が何らかの形で協力し合う必要がある。
ロッキング・スキームのようなものを使うのは、そうした問題を避けるための一方法である。
ただ、一般に、ロッキング・スキームの使用は、適切な出力を保証してはくれるものの、パフォーマンスを低下させることになる。
パフォーマンスが落ちるのが嫌ならば、単純に各プロセスがそれぞれ別の出力ファイルを作るように
(あるいは、別のリソースを使うように) すればよい。
.TP 
.PD
\fB\-p, \-\-interactive\fP
コマンドライン 1 行ごとに、実行するかどうかをユーザに尋ねるプロンプトを出し、端末から
1 行読み込む。コマンドラインを実行するのは、
返答が `y' または `Y' で 始まるときだけである。自動的に \fB\-t\fP が指定される。
.TP 
.PD
\fB\-\-process\-slot\-var\fP=\fIname\fP
複数の子プロセスを同時実行しているとき、その各子プロセスで環境変数 \fIname\fP
にユニークな値をセットする。値は、子プロセスが終了すると、再利用される。
この機能は、たとえば、初歩的な負荷分散スキームで利用できる。
.TP 
.PD
\fB\-r, \-\-no\-run\-if\-empty\fP
標準入力に空白しか含まれていない場合は、指定したコマンドを実行しない。
通常では、入力が全くない場合でも、コマンドが一回は実行されるのである。
このオプションは GNU の拡張である。
.TP 
.PD
\fB\-s\fP\fI max\-chars\fP, \fB\-\-max\-chars\fP\fI=max\-chars\fP
1 コマンドラインにつき最大 \fImax\-chars\fP の文字を使用する。
この文字数には、指定したコマンドと \fIinitial\-arguments\fP、それに各引き数文字列の終端を示すヌル文字も含まれる。
指定できる値の上限は、システム次第であり、exec 関数に対する引き数の最大長から、現在の環境のサイズと
2048 バイトの余裕領域を引いたものである。もしその値が 128KiB
以上だったときは、デフォルトの値には 128KiB が使用される。
128KiB 未満のときは、算出された上限がデフォルトの値になる。
1KiB は 1024 バイトである。制限がより厳しい場合でも、\fBxarg\fP は自動的にそれに対応する。
.TP 
\fB\-\-show\-limits\fP
コマンドライン長の上限を表示する。コマンドライン長の上限は、
オペレーティングシステム、\fBxargs\fP が設定したバッファサイズ、それに \fB\-s\fP
オプションによって決まる。\fBxargs\fP にコマンドライン長の上限の表示以外をさせたくなかったら、
入力を \fI/dev/null\fP からパイプで \fBxargs\fP に渡してやればよい
(さらに \fB\-\-no\-run\-if\-empty\fP を指定した方がよいかもしれない)。
.TP 
\fB\-t, \-\-verbose\fP
実行する前に、コマンドラインを標準エラー出力に表示する。
.TP 
.PD
\fB\-x, \-\-exit\fP
作成されたコマンドラインがコマンドライン長の上限を超過していたら (\fB\-s\fP オプションを参照)、終了する。
.TP 
\fB\-\-help\fP
\fBxargs\fP のオプションについて簡単に説明し終了する。
.TP 
\fB\-\-version\fP
\fBxargs\fP のバージョン番号を表示して、終了する。
.SH 用例
.nf
\fBfind /tmp \-name core \-type f \-print | xargs /bin/rm \-f\fP

.fi
\fB/tmp\fP ディレクトリ以下に \fBcore\fP という名前のファイルを捜して、それを消去する。
改行や空白を含むファイル名があると、正しく動作しないので、注意すること。
.P
\fBfind /tmp \-name core \-type f \-print0 | xargs \-0 /bin/rm \-f\fP

.fi
\fB/tmp\fP ディレクトリ以下に \fBcore\fP という名前のファイルを捜して、それを消去する。
ファイル名の処理に当たっては、ファイル名やディレクトリ名に空白や改行が含まれていても、適切に扱われるようにしている。

.P
\fBfind /tmp \-depth \-name core \-type f \-delete\fP

.fi
\fB/tmp\fP ディレクトリ以下に \fBcore\fP という名前のファイルを捜して、それを消去する。
上の例よりもこちらの方が効率的である (なぜなら、 \fBrm\fP を実行するために
\fBfork\fP(2) と \fBexec\fP(2) を使わないですむし、そもそも、 \fBxargs\fP
のプロセスを必要としないから)。

.P
.nf
\fBcut \-d: \-f1 < /etc/passwd | sort | xargs echo\fP

.fi
システムの全ユーザを列挙した簡潔なリストを生成する
(訳注: 要するに、改行ではなく、空白で区切られたユーザ名のリストを作るということ)。

.P
.nf
\fBxargs sh \-c 'emacs "$@" < /dev/tty' emacs\fP

.fi
\fBxargs\fP の標準入力からファイルのリストを受け取り、Emacs
を必要なだけ次々と実行して、ファイルを編集する。この例は BSD の \fB\-o\fP
オプションと同じことを実現するが、こちらの方が柔軟性があり、多くのシステムで利用できる。



.SH 終了ステータス
\fBxargs\fP の終了ステータスは以下のとおりである。
.nf
0 成功した。
123 指定したコマンドの実行が 1\-125 のステータスで終了した。
124 指定したコマンドが 255 のステータスで終了した。
125 指定したコマンドがシグナルによって kill された。
126 指定したコマンドが実行できない。
127 指定したコマンドが見つからない。
1 上記以外のエラーが起きた。
.fi
.P
128 以上の終了ステータスは、致命的なシグナルのせいでプログラムが止まったことを示すために、シェルが使用している。
.SH 規格への準拠
GNU xargs version 4.2.9 以来、ファイルの論理的な終端を示す指標
(a logical end\-of\-file marker) を持たないのが、\fBxargs\fP
のデフォルトになっている。このことは POSIX (IEEE Std 1003.1, 2004 Edition)
で認められている。
.P
\-l や \-i オプションは 1997 年版の POSIX 規格には存在するが、
2004 年版の POSIX 規格には存在しない。従って、それぞれ \-L や \-I の方を使うべきである。
.P
POSIX 規格は、実装に当たって、\fBexec\fP 関数に対する引き数のサイズに上限を設けることを認めている。
そして、その上限は、環境のサイズも含めて、少なくとも 4096 バイトあればよいことになっている。
移植性のあるスクリプトを書こうと思ったら、これより大きいサイズを当てにしてはいけない。
もっとも、実際の上限がそんなに小さい実装に、筆者は出会ったことがないけれど。
\fB\-\-show\-limits\fP オプションを使えば、使用中のシステムで有効な実際の上限を知ることができる。


.SH 関連項目
\fBfind\fP(1), \fBlocate\fP(1), \fBlocatedb\fP(5), \fBupdatedb\fP(1), \fBfork\fP(2),
\fBexecvp\fP(3), \fBkill\fP(1), \fBsignal\fP(7),

\fBxargs\fP については、充実した関連文書が Texinfo マニュアルの形で保守されている。
\fBinfo\fP と \fBxargs\fP プログラムが、御使用のサイトできちんとインストールされているならば、
\fBinfo xargs\fP とコマンドを打ち込むことで、詳細なマニュアルが読めるはずだ。

.SH バグ
\fB\-L\fP オプションと \fB\-I\fP オプションを組み合わせても、うまく行かない。
組み合わせて使えた方がよいのかもしれないが。
.IP "[\fB訳注\fP]:" 8
\fB\-I\fP オプションの説明にあるように、\fB\-I\fP \fIreplace\-str\fP を指定すると、
\fB\-L\fP 1 が自動的に設定される。だから、ここで言っているのは、現状では 
\fB\-L\fP 2 や \fB\-L\fP 3 を \fB\-I\fP 
と一緒に使っても、期待する結果は得られないということだろう。
.P
\fBxargs\fP を安全に使うことは不可能である。なぜなら、入力されるファイル名のリストを生成する時間と \fBxargs\fP
が実行するコマンドがそれを使用する時間との間には、必ず時間差があるからだ。
もし、他のユーザがシステムにアクセスすることができれば、
そのユーザはこの時間の隙間にファイルシステムを操作して、\fBxargs\fP
が実行するコマンドの動作を、こちらが意図していないファイルに無理矢理向けることができる。
この問題や、これに関連する問題については、
findutils に含まれる Texinfo 文書の「Security Considerations」という章でもっと細かく論じているので、
そちらを参照していただきたい。なお、\fBfind\fP の \fB\-execdir\fP
オプションは、より安全な方法として \fBxargs\fP の代わりに使用できることが多い。

\fB\-I\fP オプションを使うと、標準入力から読み込まれた各行が内部的にバッファされる。
それは、\fB\-I\fP オプションを付けて使ったとき、\fBxargs\fP が受け入れる入力行
1 行の長さに上限があるということだ。この制限を回避するには、\fB\-s\fP
オプションを使って、\fBxargs\fP が使用するバッファ空間のサイズを増やしてやればよい。
さらに、\fBxargs\fP をもう一つ実行すれば、長すぎる行の出現を確実に避けることができる。たとえば、
.P
\fBsomecommand | xargs \-s 50000 echo | xargs \-I '{}' \-s 100000 rm '{}'\fP
.P
この例では、\fBxargs\fP の最初の実行には、入力行の長さの上限がない。
\fB\-I\fP オプションを使っていないからである。
\fBxargs\fP の二番目の実行には、そうした上限があるが、処理できる以上の長さの行に絶対に出会わないようになっている。
これが理想的な解決法だというのではない。むしろ、 \fB\-I\fP オプションによって入力行の長さに上限ができない方がよいのであり、
だからこそ、この問題を「バグ」セクションで論じているのである。
なお、この問題は \fBfind\fP(1) の出力では起きない。\fBfind\fP は 1 行に
1 ファイル名しか出力しないからだ。
.P
バグ報告の最善の方法は、http://savannah.gnu.org/bugs/?group=findutils
にある書式を使用することである。そうすれば、問題解決の進行状態を追うことができるからだ。
\fBxargs\fP(1) や findutils パッケージ全般についてのその他のご意見は、
\fIbug\-findutils\fP メーリングリストにお出しになればよい。
メーリングリストに参加するには、\fIbug\-findutils\-request@gnu.org\fP 宛に
E メールを送っていただきたい。
.SH 翻訳について
この翻訳は findutils-4.6.0 所収の xargs.1 の翻訳である。
お手元の findutils は、もっと新しいバージョン、たとえば 4.7.0-git
になっているかもしれない。だが、4.7.0 は開発中の版なので、manpage 
も変化し続けており、現時点で最新の 4.7.0 
のマニュアルを翻訳しても、お手元の英語マニュアルとは内容が微妙に違うかもしれないのだ。
バージョンが同じ 4.7.0 なのに、それでは紛らわしい。そこで、あえて現在の安定版、4.6.0 
のマニュアルを底本にした。
.PP
ご参考までに書いておくと、2017/06/09 以降の 4.7.0-git の \fBxargs\fP 
には、\fB\-o\fP (\fB\-\-open\-tty\fP) というオプションが追加されている。4.7.0-git 
の \fBman xargs\fP によれば、「コマンドを実行する前に、子プロセスで標準入力を 
/dev/tty として再オープンする」というものである。そうした最近のバージョンでは 
\fB\-o\fP オプションを使えば、たとえば "find . -name '*.txt~' | xargs -o rm -i" 
といったことが可能になるようだ。失敗しても困らないファイルでお試しいただきたい。
(2018/03/03)
